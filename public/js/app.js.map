{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/directives/dragDrop.js","js/controllers/main.js","js/models/post.js","js/controllers/posts.js","js/router.js","js/models/suggestion.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","$window","submit","signup","register","user","then","res","localStorage","setItem","data","token","id","getPayload","go","this","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","categoriesShow","category","get","params","$resource","update","method","dragDrop","reader","FileReader","restrict","replace","templateUrl","scope","base64","link","$scope","element","active","onload","result","$apply","on","e","preventDefault","file","target","files","dataTransfer","readAsDataURL","MainController","$rootScope","logout","getUserId","userId","secureState","toState","toParams","main","message","loginVisible","registerVisible","isAuthenticated","protectedStates","includes","name","parseFloat","isLoggedIn","$on","Post","PostsIndexController","postsIndex","PostsShowController","Suggestion","createSuggestion","save","postsShow","newSuggestion","post_id","post","formVisible","deletePost","$remove","deleteSuggestion","suggestion","console","log","delete","index","suggestions","indexOf","splice","$promise","postOwner","Router","$stateProvider","$urlRouterProvider","state","url","controller","otherwise","User","UsersShowController","deleteUser","usersShow","isCurrentUser","Number","createPost","newPost","user_id","postformVisible","editformVisible","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","factory","directive"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state', '$window'];\nfunction RegisterController($auth, $state, $window) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then((res) => {\n        $window.localStorage.setItem('token', res.data.token);\n        const id = $auth.getPayload().id;\n        $state.go('usersShow', {id: id});\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        const id = $auth.getPayload().id;\n        $state.go('usersShow', {id: id});\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController);\n\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n  categoriesShow.category = Category.get($state.params);\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .directive('dragDrop', dragDrop);\n\nfunction dragDrop() {\n\n  const reader = new FileReader();\n\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.active = false;\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.active = true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n\n          const file = (e.target.files || e.dataTransfer.files)[0];\n\n          reader.readAsDataURL(file);\n        });\n    }\n  };\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.loginVisible = false;\n  main.registerVisible = false;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('postsIndex');\n    });\n  }\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n\n\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    main.loginVisible = false;\n    main.registerVisible = false;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .factory('Post', Post);\n\nPost.$inject = ['$resource', 'API_URL'];\nfunction Post($resource, API_URL) {\n  return new $resource(`${API_URL}/posts/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PostsIndexController', PostsIndexController)\n  .controller('PostsShowController', PostsShowController);\n  // .controller('PostsEditController', PostsEditController);\n\nPostsIndexController.$inject = ['Post'];\nfunction PostsIndexController(Post) {\n  const postsIndex = this;\n  postsIndex.all = Post.query();\n}\n\nPostsShowController.$inject = ['Post', '$state', 'Suggestion', '$auth'];\nfunction PostsShowController(Post, $state, Suggestion, $auth) {\n  const postsShow = this;\n  postsShow.formVisible = false;\n\n  postsShow.newSuggestion = {\n    post_id: $state.params.id\n  };\n\n  Post.get($state.params).$promise.then((post) => {\n    postsShow.post = post;\n    if ($auth.isAuthenticated()) {\n      // If the id stored in the token, is the same as the id of the post's user, then we can show the delete button\n      postsShow.postOwner = $auth.getPayload().id === postsShow.post.user.id;\n    }\n  });\n\n  function createSuggestion() {\n    Suggestion.save(postsShow.newSuggestion, () => {\n      postsShow.newSuggestion = {\n        post_id: $state.params.id\n      };\n      postsShow.post = Post.get($state.params);\n      postsShow.formVisible = false;\n    });\n  }\n\n  function deletePost() {\n    postsShow.post.$remove(() => {\n      $state.go('postsIndex');\n    });\n  }\n\n  function deleteSuggestion(suggestion) {\n    console.log(suggestion);\n\n\n    Suggestion.delete(suggestion, () => {\n      const index = postsShow.post.suggestions.indexOf(suggestion);\n      postsShow.post.suggestions.splice(index, 1);\n    });\n  }\n\n  postsShow.createSuggestion = createSuggestion;\n  postsShow.deleteSuggestion = deleteSuggestion;\n  postsShow.deletePost = deletePost;\n}\n","angular.module('finalProject')\n .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n     .state('usersShow', {\n       url: '/users/:id',\n       templateUrl: 'templates/usersShow.html',\n       controller: 'UsersShowController as usersShow'\n     })\n     .state('usersEdit', {\n       url: '/users/:id/edit',\n       templateUrl: 'templates/usersEdit.html',\n       controller: 'UsersEditController as usersEdit'\n     })\n     .state('postsIndex', {\n       url: '/posts',\n       templateUrl: '/templates/postsIndex.html',\n       controller: 'PostsIndexController as postsIndex'\n     })\n     .state('postsShow', {\n       url: '/posts/:id',\n       templateUrl: '/templates/postsShow.html',\n       controller: 'PostsShowController as postsShow'\n     })\n     .state('categoriesShow', {\n       url: '/categories/:id',\n       templateUrl: '/templates/categoriesShow.html',\n       controller: 'CategoriesShowController as categoriesShow'\n     })\n     .state('categoriesIndex', {\n       url: '/categories',\n       templateUrl: '/templates/categoriesIndex.html',\n       controller: 'CategoriesIndexController as categoriesIndex'\n     });\n\n  $urlRouterProvider.otherwise('/posts');\n}\n","angular.module('finalProject')\n  .factory('Suggestion', Suggestion);\n\nSuggestion.$inject = ['$resource', 'API_URL'];\nfunction Suggestion($resource, API_URL) {\n  return new $resource(`${API_URL}/suggestions/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Post'];\nfunction UsersShowController(User, $state, $auth, Post) {\n  const usersShow = this;\n  usersShow.postformVisible = false;\n  usersShow.editformVisible = false;\n  usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $auth.logout()\n        .then(() => {\n          $state.go('postsIndex');\n        });\n    });\n  }\n\n  function isCurrentUser() {\n    if ($auth.isAuthenticated()) {\n      return $auth.getPayload().id === Number($state.params.id);\n    }\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  //form visibility set to false. now in the usersShow.html the hide/show button code will work\n\n  usersShow.newPost = {\n    user_id: $state.params.id\n  };\n  usersShow.user = User.get($state.params);\n\n  function createPost() {\n    Post.save(usersShow.newPost, () => {\n      usersShow.newPost = {\n        user_id: $state.params.id\n      };\n      usersShow.user = User.get($state.params);\n      usersShow.postformVisible = false;\n\n    });\n  }\n\n  usersShow.createPost = createPost;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n\n// ProfileFeedController.$inject = [ '$state', 'ProfileFeed' ];\n// function ProfileFeedController($state, ProfileFeed) {\n//   const profileFeed = this;\n//\n//   profileFeed.all = ProfileFeed.query($state.params);\n// }\n"]}