{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/controllers/main.js","js/models/post.js","js/controllers/posts.js","js/router.js","js/models/suggestion.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","id","getPayload","go","this","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","categoriesShow","category","get","params","$resource","update","method","MainController","$rootScope","logout","getUserId","userId","secureState","e","toState","toParams","main","message","loginVisible","registerVisible","isAuthenticated","protectedStates","includes","name","parseFloat","preventDefault","isLoggedIn","$on","Post","PostsIndexController","postsIndex","PostsShowController","Suggestion","createSuggestion","save","postsShow","newSuggestion","post_id","post","formVisible","deletePost","$remove","deleteSuggestion","suggestion","console","log","delete","index","suggestions","indexOf","splice","$promise","postOwner","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersShowController","deleteUser","usersShow","isCurrentUser","Number","createPost","newPost","user_id","postformVisible","UsersEditController","usersEdit","$update","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        const id = $auth.getPayload().id;\n        $state.go('usersShow', {id: id});\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        const id = $auth.getPayload().id;\n        $state.go('usersShow', {id: id});\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController);\n\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n  categoriesShow.category = Category.get($state.params);\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  main.loginVisible = false;\n  main.registerVisible = false;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('postsIndex');\n    });\n  }\n\n  function getUserId() {\n    const userId = $auth.getPayload().id;\n    $state.go('usersShow', {id: userId});\n  }\n\n\n\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    main.loginVisible = false;\n    main.registerVisible = false;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n  main.getUserId = getUserId;\n}\n","angular.module('finalProject')\n  .factory('Post', Post);\n\nPost.$inject = ['$resource', 'API_URL'];\nfunction Post($resource, API_URL) {\n  return new $resource(`${API_URL}/posts/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PostsIndexController', PostsIndexController)\n  .controller('PostsShowController', PostsShowController);\n  // .controller('PostsEditController', PostsEditController);\n\nPostsIndexController.$inject = ['Post'];\nfunction PostsIndexController(Post) {\n  const postsIndex = this;\n  postsIndex.all = Post.query();\n}\n\nPostsShowController.$inject = ['Post', '$state', 'Suggestion', '$auth'];\nfunction PostsShowController(Post, $state, Suggestion, $auth) {\n  const postsShow = this;\n  postsShow.formVisible = false;\n\n  postsShow.newSuggestion = {\n    post_id: $state.params.id\n  };\n\n  Post.get($state.params).$promise.then((post) => {\n    postsShow.post = post;\n    if ($auth.isAuthenticated()) {\n      // If the id stored in the token, is the same as the id of the post's user, then we can show the delete button\n      postsShow.postOwner = $auth.getPayload().id === postsShow.post.user.id;\n    }\n  });\n\n  function createSuggestion() {\n    Suggestion.save(postsShow.newSuggestion, () => {\n      postsShow.newSuggestion = {\n        post_id: $state.params.id\n      };\n      postsShow.post = Post.get($state.params);\n      postsShow.formVisible = false;\n    });\n  }\n\n  function deletePost() {\n    postsShow.post.$remove(() => {\n      $state.go('postsIndex');\n    });\n  }\n\n  function deleteSuggestion(suggestion) {\n    console.log(suggestion);\n\n\n    Suggestion.delete(suggestion, () => {\n      const index = postsShow.post.suggestions.indexOf(suggestion);\n      postsShow.post.suggestions.splice(index, 1);\n    });\n  }\n\n  postsShow.createSuggestion = createSuggestion;\n  postsShow.deleteSuggestion = deleteSuggestion;\n  postsShow.deletePost = deletePost;\n}\n","angular.module('finalProject')\n .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n     .state('usersShow', {\n       url: '/users/:id',\n       templateUrl: 'templates/usersShow.html',\n       controller: 'UsersShowController as usersShow'\n     })\n     .state('usersEdit', {\n       url: '/users/:id/edit',\n       templateUrl: 'templates/usersEdit.html',\n       controller: 'UsersEditController as usersEdit'\n     })\n     .state('postsIndex', {\n       url: '/posts',\n       templateUrl: '/templates/postsIndex.html',\n       controller: 'PostsIndexController as postsIndex'\n     })\n     .state('postsShow', {\n       url: '/posts/:id',\n       templateUrl: '/templates/postsShow.html',\n       controller: 'PostsShowController as postsShow'\n     })\n     .state('categoriesShow', {\n       url: '/categories/:id',\n       templateUrl: '/templates/categoriesShow.html',\n       controller: 'CategoriesShowController as categoriesShow'\n     })\n     .state('categoriesIndex', {\n       url: '/categories',\n       templateUrl: '/templates/categoriesIndex.html',\n       controller: 'CategoriesIndexController as categoriesIndex'\n     });\n\n  $urlRouterProvider.otherwise('/posts');\n}\n","angular.module('finalProject')\n  .factory('Suggestion', Suggestion);\n\nSuggestion.$inject = ['$resource', 'API_URL'];\nfunction Suggestion($resource, API_URL) {\n  return new $resource(`${API_URL}/suggestions/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Post'];\nfunction UsersShowController(User, $state, $auth, Post) {\n  const usersShow = this;\n  usersShow.postformVisible = false;\n  usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    if ($auth.isAuthenticated()) {\n      return $auth.getPayload().id === Number($state.params.id);\n    }\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n  //form visibility set to false. now in the usersShow.html the hide/show button code will work\n\n  usersShow.newPost = {\n    user_id: $state.params.id\n  };\n  usersShow.user = User.get($state.params);\n\n  function createPost() {\n    Post.save(usersShow.newPost, () => {\n      usersShow.newPost = {\n        user_id: $state.params.id\n      };\n      usersShow.user = User.get($state.params);\n      usersShow.postformVisible = false;\n\n    });\n  }\n\n  usersShow.createPost = createPost;\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n\n// ProfileFeedController.$inject = [ '$state', 'ProfileFeed' ];\n// function ProfileFeedController($state, ProfileFeed) {\n//   const profileFeed = this;\n//\n//   profileFeed.all = ProfileFeed.query($state.params);\n// }\n"]}