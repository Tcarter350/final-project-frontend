{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/categories.js","js/models/category.js","js/controllers/main.js","js/models/post.js","js/controllers/posts.js","js/router.js","js/models/suggestion.js","js/controllers/suggestions.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","CategoriesIndexController","Category","categoriesIndex","all","query","CategoriesShowController","categoriesShow","category","get","params","CategoriesNewController","categoriesNew","$resource","id","update","method","MainController","$rootScope","logout","secureState","e","toState","toParams","main","message","isAuthenticated","protectedStates","includes","name","parseFloat","getPayload","preventDefault","isLoggedIn","$on","Post","PostsIndexController","postsIndex","PostsShowController","Suggestion","createSuggestion","save","postsShow","newSuggestion","post_id","post","formVisible","PostsNewController","postsNew","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","SuggestionsIndexController","suggestionsIndex","SuggestionsShowController","suggestionsShow","SuggestionsNewController","suggestionsNew","User","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","$remove","isCurrentUser","Number","delete","UsersEditController","usersEdit","$update","ProfileFeedController","ProfileFeed","profileFeed","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('CategoriesIndexController', CategoriesIndexController)\n  .controller('CategoriesShowController', CategoriesShowController)\n  .controller('CategoriesNewController', CategoriesNewController);\n  // .controller('PostsEditController', PostsEditController);\nCategoriesIndexController.$inject = ['Category'];\nfunction CategoriesIndexController(Category) {\n  const categoriesIndex = this;\n  categoriesIndex.all = Category.query();\n}\n\nCategoriesShowController.$inject = ['Category', '$state'];\nfunction CategoriesShowController(Category, $state) {\n  const categoriesShow = this;\n  categoriesShow.category = Category.get($state.params);\n}\n\nCategoriesNewController.$inject = ['Category', '$state'];\nfunction CategoriesNewController(Category, $state) {\n  const categoriesNew = this;\n  categoriesNew.category = Category.get($state.params);\n}\n","angular.module('finalProject')\n  .factory('Category', Category);\n\nCategory.$inject = ['$resource', 'API_URL'];\nfunction Category($resource, API_URL) {\n  return new $resource(`${API_URL}/categories/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n  const protectedStates = ['usersEdit', 'usersNew'];\n  function secureState(e, toState, toParams) {\n    main.message = null;\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Post', Post);\n\nPost.$inject = ['$resource', 'API_URL'];\nfunction Post($resource, API_URL) {\n  return new $resource(`${API_URL}/posts/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('PostsIndexController', PostsIndexController)\n  .controller('PostsShowController', PostsShowController)\n  .controller('PostsNewController', PostsNewController);\n  // .controller('PostsEditController', PostsEditController);\nPostsIndexController.$inject = ['Post'];\nfunction PostsIndexController(Post) {\n  const postsIndex = this;\n  postsIndex.all = Post.query();\n}\n\nPostsShowController.$inject = ['Post', '$state', 'Suggestion'];\nfunction PostsShowController(Post, $state, Suggestion) {\n  const postsShow = this;\n  postsShow.formVisible = false;\n\n  postsShow.newSuggestion = {\n    post_id: $state.params.id\n  };\n  postsShow.post = Post.get($state.params);\n\n  function createSuggestion() {\n    Suggestion.save(postsShow.newSuggestion, () => {\n      postsShow.newSuggestion = {\n        post_id: $state.params.id\n      };\n      postsShow.post = Post.get($state.params);\n      postsShow.formVisible = false;\n    });\n  }\n\n  postsShow.createSuggestion = createSuggestion;\n}\n\nPostsNewController.$inject = ['Post', '$state'];\nfunction PostsNewController(Post, $state) {\n  const postsNew = this;\n  postsNew.post = {};\n}\n","angular.module('finalProject')\n .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n     .state('usersIndex', {\n       url: '/users',\n       templateUrl: '/templates/usersIndex.html',\n       controller: 'UsersIndexController as usersIndex'\n     })\n     .state('register', {\n       url: '/register',\n       templateUrl: '/templates/register.html',\n       controller: 'RegisterController as register'\n     })\n     .state('login', {\n       url: '/login',\n       templateUrl: '/templates/login.html',\n       controller: 'LoginController as login'\n     })\n     .state('usersShow', {\n       url: '/users/:id',\n       templateUrl: 'templates/usersShow.html',\n       controller: 'UsersShowController as usersShow'\n     })\n     .state('usersEdit', {\n       url: '/users/:id/edit',\n       templateUrl: 'templates/usersEdit.html',\n       controller: 'UsersEditController as usersEdit'\n     })\n     .state('postsIndex', {\n       url: '/posts',\n       templateUrl: '/templates/postsIndex.html',\n       controller: 'PostsIndexController as postsIndex'\n     })\n     .state('postsNew', {\n       url: '/posts/new',\n       templateUrl: '/templates/postsNew.html',\n       controller: 'PostsNewController as postsNew'\n     })\n     .state('postsShow', {\n       url: '/posts/:id',\n       templateUrl: '/templates/postsShow.html',\n       controller: 'PostsShowController as postsShow'\n     })\n     .state('categoriesShow', {\n       url: '/categories/:id',\n       templateUrl: '/templates/categoriesShow.html',\n       controller: 'CategoriesShowController as categoriesShow'\n     })\n\n     .state('categoriesIndex', {\n       url: '/categories',\n       templateUrl: '/templates/categoriesIndex.html',\n       controller: 'CategoriesIndexController as categoriesIndex'\n     })\n\n     .state('categoriesNew', {\n       url: '/categories',\n       templateUrl: '/templates/categoriesShow.html',\n       controller: 'CategoriesShowController as categoriesShow'\n     })\n\n    //  .state('suggestionsShow', {\n    //    url: '/suggestions/:id',\n    //    templateUrl: '/templates/suggestionsShow.html',\n    //    controller: 'SuggestionsShowController as suggestionsShow'\n    //  })\n\n     .state('suggestionsIndex', {\n       url: '/suggestions',\n       templateUrl: '/templates/suggestionsIndex.html',\n       controller: 'SuggestionsIndexController as suggestionsIndex'\n     })\n\n     .state('suggestionsNew', {\n       url: '/suggestions',\n       templateUrl: '/templates/suggestionsShow.html',\n       controller: 'SuggestionsShowController as suggestionsShow'\n     });\n\n  $urlRouterProvider.otherwise('/posts');\n}\n","angular.module('finalProject')\n  .factory('Suggestion', Suggestion);\n\nSuggestion.$inject = ['$resource', 'API_URL'];\nfunction Suggestion($resource, API_URL) {\n  return new $resource(`${API_URL}/suggestions/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('SuggestionsIndexController', SuggestionsIndexController)\n  .controller('SuggestionsShowController', SuggestionsShowController)\n  .controller('SuggestionsNewController', SuggestionsNewController);\n  // .controller('PostsEditController', PostsEditController);\nSuggestionsIndexController.$inject = ['Suggestion'];\nfunction SuggestionsIndexController(Suggestion) {\n  const suggestionsIndex = this;\n  suggestionsIndex.all = Suggestion.query();\n}\n\nSuggestionsShowController.$inject = ['Suggestion', '$state'];\nfunction SuggestionsShowController(Suggestion, $state) {\n  const suggestionsShow = this;\n  suggestionsShow.post = Suggestion.get($state.params);\n}\n\nSuggestionsNewController.$inject = ['Suggestion', '$state'];\nfunction SuggestionsNewController(Suggestion, $state) {\n  const suggestionsNew = this;\n  suggestionsNew.post = Suggestion.get($state.params);\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n  usersIndex.all = User.query();\n}\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === Number($state.params.id);\n  }\n\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n  usersEdit.user = User.get($state.params);\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n\nProfileFeedController.$inject = [ '$state', 'ProfileFeed' ];\nfunction ProfileFeedController($state, ProfileFeed) {\n  const profileFeed = this;\n\n  profileFeed.all = ProfileFeed.query($state.params);\n}\n"]}